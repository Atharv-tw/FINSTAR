
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  password: 'password',
  avatarUrl: 'avatarUrl',
  level: 'level',
  currentXp: 'currentXp',
  totalXp: 'totalXp',
  coins: 'coins',
  streakDays: 'streakDays',
  lastActiveDate: 'lastActiveDate',
  hasCompletedOnboarding: 'hasCompletedOnboarding',
  financialPersonality: 'financialPersonality',
  onboardingData: 'onboardingData',
  joinDate: 'joinDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GameProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  gameId: 'gameId',
  gameName: 'gameName',
  highScore: 'highScore',
  timesPlayed: 'timesPlayed',
  lastPlayed: 'lastPlayed',
  isCompleted: 'isCompleted',
  gameData: 'gameData'
};

exports.Prisma.GameResultScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  gameProgressId: 'gameProgressId',
  gameId: 'gameId',
  score: 'score',
  xpEarned: 'xpEarned',
  coinsEarned: 'coinsEarned',
  resultData: 'resultData',
  playedAt: 'playedAt'
};

exports.Prisma.LearningModuleScalarFieldEnum = {
  id: 'id',
  moduleId: 'moduleId',
  title: 'title',
  description: 'description',
  totalXp: 'totalXp',
  iconPath: 'iconPath',
  gradientColors: 'gradientColors',
  order: 'order',
  orderIndex: 'orderIndex',
  category: 'category',
  difficulty: 'difficulty',
  estimatedMinutes: 'estimatedMinutes',
  thumbnailUrl: 'thumbnailUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LessonScalarFieldEnum = {
  id: 'id',
  lessonId: 'lessonId',
  moduleId: 'moduleId',
  title: 'title',
  description: 'description',
  xpReward: 'xpReward',
  estimatedMinutes: 'estimatedMinutes',
  content: 'content',
  order: 'order',
  orderIndex: 'orderIndex',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LessonProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  lessonId: 'lessonId',
  isCompleted: 'isCompleted',
  completedAt: 'completedAt',
  lastAccessed: 'lastAccessed',
  xpEarned: 'xpEarned'
};

exports.Prisma.QuizQuestionScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  question: 'question',
  options: 'options',
  correctAnswerIndex: 'correctAnswerIndex',
  difficulty: 'difficulty',
  category: 'category',
  explanation: 'explanation',
  points: 'points',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AchievementScalarFieldEnum = {
  id: 'id',
  achievementId: 'achievementId',
  title: 'title',
  description: 'description',
  icon: 'icon',
  color: 'color',
  category: 'category',
  requirement: 'requirement',
  requiredValue: 'requiredValue',
  xpReward: 'xpReward',
  createdAt: 'createdAt'
};

exports.Prisma.UserAchievementScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  achievementId: 'achievementId',
  unlockedAt: 'unlockedAt'
};

exports.Prisma.StreakHistoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  streakDays: 'streakDays',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  GameProgress: 'GameProgress',
  GameResult: 'GameResult',
  LearningModule: 'LearningModule',
  Lesson: 'Lesson',
  LessonProgress: 'LessonProgress',
  QuizQuestion: 'QuizQuestion',
  Achievement: 'Achievement',
  UserAchievement: 'UserAchievement',
  StreakHistory: 'StreakHistory'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\tiwar\\Desktop\\FINSTAR APP\\backend\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\tiwar\\Desktop\\FINSTAR APP\\backend\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// ============================================\n// USER MANAGEMENT\n// ============================================\n\nmodel User {\n  id        String  @id @default(uuid())\n  username  String  @unique\n  email     String  @unique\n  password  String // Hashed with bcrypt\n  avatarUrl String?\n\n  // Gamification\n  level     Int @default(1)\n  currentXp Int @default(0)\n  totalXp   Int @default(0)\n  coins     Int @default(0)\n\n  // Streak Tracking\n  streakDays     Int      @default(0)\n  lastActiveDate DateTime @default(now())\n\n  // Onboarding & Personality\n  hasCompletedOnboarding Boolean @default(false)\n  financialPersonality   String? // \"saver\", \"investor\", \"spender\", \"balanced\"\n  onboardingData         Json? // Store quiz responses\n\n  // Metadata\n  joinDate  DateTime @default(now())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relations\n  gameProgress   GameProgress[]\n  gameResults    GameResult[]\n  lessonProgress LessonProgress[]\n  achievements   UserAchievement[]\n  streakHistory  StreakHistory[]\n\n  @@index([totalXp(sort: Desc)]) // For leaderboard queries\n  @@index([username])\n  @@index([email])\n  @@map(\"user\")\n}\n\n// ============================================\n// GAME SYSTEM\n// ============================================\n\nmodel GameProgress {\n  id     String @id @default(uuid())\n  userId String\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  gameId      String // \"life_swipe\", \"quiz_battle\", \"market_explorer\", \"budget_blitz\"\n  gameName    String\n  highScore   Int      @default(0)\n  timesPlayed Int      @default(0)\n  lastPlayed  DateTime @default(now())\n  isCompleted Boolean  @default(false)\n  gameData    Json? // Game-specific persistent data\n\n  // Relations\n  results GameResult[]\n\n  @@unique([userId, gameId])\n  @@index([userId])\n  @@index([gameId])\n  @@map(\"game_progress\")\n}\n\nmodel GameResult {\n  id             String       @id @default(uuid())\n  userId         String\n  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)\n  gameProgressId String\n  gameProgress   GameProgress @relation(fields: [gameProgressId], references: [id], onDelete: Cascade)\n\n  gameId      String\n  score       Int\n  xpEarned    Int\n  coinsEarned Int\n  resultData  Json // Detailed game-specific results\n  playedAt    DateTime @default(now())\n\n  @@index([userId])\n  @@index([gameId])\n  @@index([playedAt(sort: Desc)])\n  @@map(\"game_result\")\n}\n\n// ============================================\n// LEARNING SYSTEM\n// ============================================\n\nmodel LearningModule {\n  id               String   @id @default(uuid())\n  moduleId         String   @unique // \"money_basics\", \"banking\", etc.\n  title            String\n  description      String\n  totalXp          Int\n  iconPath         String?\n  gradientColors   Json // Array of hex colors [\"#4A90E2\", \"#50E3C2\"]\n  order            Int      @default(0)\n  orderIndex       Int      @default(0) // Alternative field name for order\n  category         String   @default(\"general\") // Module category (e.g., \"investing\", \"budgeting\")\n  difficulty       String   @default(\"beginner\") // Difficulty level: \"beginner\", \"intermediate\", \"advanced\"\n  estimatedMinutes Int      @default(30) // Estimated time to complete module\n  thumbnailUrl     String? // Thumbnail image URL\n  createdAt        DateTime @default(now())\n  updatedAt        DateTime @updatedAt\n\n  // Relations\n  lessons Lesson[]\n\n  @@index([order])\n  @@index([orderIndex])\n  @@map(\"learning_module\")\n}\n\nmodel Lesson {\n  id       String         @id @default(uuid())\n  lessonId String         @unique // \"mb_01\", \"mb_02\", etc.\n  moduleId String\n  module   LearningModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)\n\n  title            String\n  description      String\n  xpReward         Int\n  estimatedMinutes Int\n  content          Json // Array of lesson content objects\n  order            Int    @default(0)\n  orderIndex       Int    @default(0) // Alternative field name for order\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relations\n  progress LessonProgress[]\n\n  @@index([moduleId])\n  @@index([order])\n  @@index([orderIndex])\n  @@map(\"lesson\")\n}\n\nmodel LessonProgress {\n  id       String @id @default(uuid())\n  userId   String\n  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n  lessonId String\n  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)\n\n  isCompleted  Boolean   @default(false)\n  completedAt  DateTime?\n  lastAccessed DateTime? // Track when lesson was last accessed\n  xpEarned     Int       @default(0)\n\n  @@unique([userId, lessonId])\n  @@index([userId])\n  @@index([lessonId])\n  @@map(\"lesson_progress\")\n}\n\n// ============================================\n// QUIZ SYSTEM\n// ============================================\n\nmodel QuizQuestion {\n  id                 String @id @default(uuid())\n  questionId         String @unique\n  question           String\n  options            Json // Array of strings\n  correctAnswerIndex Int\n  difficulty         String // \"easy\", \"medium\", \"hard\"\n  category           String // \"budgeting\", \"saving\", \"investing\", etc.\n  explanation        String\n  points             Int\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([difficulty])\n  @@index([category])\n  @@map(\"quiz_question\")\n}\n\n// ============================================\n// ACHIEVEMENT SYSTEM\n// ============================================\n\nmodel Achievement {\n  id            String @id @default(uuid())\n  achievementId String @unique // \"first_lesson\", \"week_streak\", etc.\n  title         String\n  description   String\n  icon          String // Icon identifier\n  color         String // Hex color\n  category      String // \"learning\", \"gaming\", \"streak\", \"social\", \"level\", \"xp\"\n  requirement   Json? // Conditions to unlock { type, value, comparison } (optional, legacy)\n  requiredValue Int    @default(0) // Numeric value required to unlock\n  xpReward      Int    @default(0) // XP awarded when unlocked\n\n  createdAt DateTime @default(now())\n\n  // Relations\n  userAchievements UserAchievement[]\n\n  @@index([category])\n  @@map(\"achievement\")\n}\n\nmodel UserAchievement {\n  id            String      @id @default(uuid())\n  userId        String\n  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)\n  achievementId String\n  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)\n\n  unlockedAt DateTime @default(now())\n\n  @@unique([userId, achievementId])\n  @@index([userId])\n  @@index([unlockedAt(sort: Desc)])\n  @@map(\"user_achievement\")\n}\n\n// ============================================\n// STREAK SYSTEM\n// ============================================\n\nmodel StreakHistory {\n  id     String @id @default(uuid())\n  userId String\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  streakDays Int // Number of consecutive days in this streak\n  startDate  DateTime // When this streak started\n  endDate    DateTime // When this streak ended (broken)\n\n  createdAt DateTime @default(now())\n\n  @@index([userId])\n  @@index([endDate(sort: Desc)])\n  @@map(\"streak_history\")\n}\n",
  "inlineSchemaHash": "3d3c41cf00371b268dd7e34718d16fb95f2c5786832bc17e8c036d813bdda8a3",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"avatarUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"level\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"currentXp\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalXp\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"coins\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"streakDays\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lastActiveDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"hasCompletedOnboarding\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"financialPersonality\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"onboardingData\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"joinDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"gameProgress\",\"kind\":\"object\",\"type\":\"GameProgress\",\"relationName\":\"GameProgressToUser\"},{\"name\":\"gameResults\",\"kind\":\"object\",\"type\":\"GameResult\",\"relationName\":\"GameResultToUser\"},{\"name\":\"lessonProgress\",\"kind\":\"object\",\"type\":\"LessonProgress\",\"relationName\":\"LessonProgressToUser\"},{\"name\":\"achievements\",\"kind\":\"object\",\"type\":\"UserAchievement\",\"relationName\":\"UserToUserAchievement\"},{\"name\":\"streakHistory\",\"kind\":\"object\",\"type\":\"StreakHistory\",\"relationName\":\"StreakHistoryToUser\"}],\"dbName\":\"user\"},\"GameProgress\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"GameProgressToUser\"},{\"name\":\"gameId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"gameName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"highScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"timesPlayed\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lastPlayed\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isCompleted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"gameData\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"results\",\"kind\":\"object\",\"type\":\"GameResult\",\"relationName\":\"GameProgressToGameResult\"}],\"dbName\":\"game_progress\"},\"GameResult\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"GameResultToUser\"},{\"name\":\"gameProgressId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"gameProgress\",\"kind\":\"object\",\"type\":\"GameProgress\",\"relationName\":\"GameProgressToGameResult\"},{\"name\":\"gameId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"score\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"xpEarned\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"coinsEarned\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"resultData\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"playedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"game_result\"},\"LearningModule\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"moduleId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"totalXp\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"iconPath\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"gradientColors\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"order\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"orderIndex\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"difficulty\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"estimatedMinutes\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"thumbnailUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lessons\",\"kind\":\"object\",\"type\":\"Lesson\",\"relationName\":\"LearningModuleToLesson\"}],\"dbName\":\"learning_module\"},\"Lesson\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lessonId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"moduleId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"module\",\"kind\":\"object\",\"type\":\"LearningModule\",\"relationName\":\"LearningModuleToLesson\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"xpReward\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"estimatedMinutes\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"order\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"orderIndex\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"progress\",\"kind\":\"object\",\"type\":\"LessonProgress\",\"relationName\":\"LessonToLessonProgress\"}],\"dbName\":\"lesson\"},\"LessonProgress\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"LessonProgressToUser\"},{\"name\":\"lessonId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lesson\",\"kind\":\"object\",\"type\":\"Lesson\",\"relationName\":\"LessonToLessonProgress\"},{\"name\":\"isCompleted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastAccessed\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"xpEarned\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":\"lesson_progress\"},\"QuizQuestion\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"questionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"question\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"options\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"correctAnswerIndex\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"difficulty\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"explanation\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"points\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"quiz_question\"},\"Achievement\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"achievementId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"icon\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"color\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"requirement\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"requiredValue\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"xpReward\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"userAchievements\",\"kind\":\"object\",\"type\":\"UserAchievement\",\"relationName\":\"AchievementToUserAchievement\"}],\"dbName\":\"achievement\"},\"UserAchievement\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserAchievement\"},{\"name\":\"achievementId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"achievement\",\"kind\":\"object\",\"type\":\"Achievement\",\"relationName\":\"AchievementToUserAchievement\"},{\"name\":\"unlockedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"user_achievement\"},\"StreakHistory\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"StreakHistoryToUser\"},{\"name\":\"streakDays\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"streak_history\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

