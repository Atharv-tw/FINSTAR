generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USER MANAGEMENT
// ============================================

model User {
  id        String  @id @default(uuid())
  username  String  @unique
  email     String  @unique
  password  String // Hashed with bcrypt
  avatarUrl String?

  // Gamification
  level     Int @default(1)
  currentXp Int @default(0)
  totalXp   Int @default(0)
  coins     Int @default(0)

  // Streak Tracking
  streakDays     Int      @default(0)
  lastActiveDate DateTime @default(now())

  // Onboarding & Personality
  hasCompletedOnboarding Boolean @default(false)
  financialPersonality   String? // "saver", "investor", "spender", "balanced"
  onboardingData         Json? // Store quiz responses

  // Metadata
  joinDate  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  gameProgress   GameProgress[]
  gameResults    GameResult[]
  lessonProgress LessonProgress[]
  achievements   UserAchievement[]
  streakHistory  StreakHistory[]

  @@index([totalXp(sort: Desc)]) // For leaderboard queries
  @@index([username])
  @@index([email])
  @@map("user")
}

// ============================================
// GAME SYSTEM
// ============================================

model GameProgress {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  gameId      String // "life_swipe", "quiz_battle", "market_explorer", "budget_blitz"
  gameName    String
  highScore   Int      @default(0)
  timesPlayed Int      @default(0)
  lastPlayed  DateTime @default(now())
  isCompleted Boolean  @default(false)
  gameData    Json? // Game-specific persistent data

  // Relations
  results GameResult[]

  @@unique([userId, gameId])
  @@index([userId])
  @@index([gameId])
  @@map("game_progress")
}

model GameResult {
  id             String       @id @default(uuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  gameProgressId String
  gameProgress   GameProgress @relation(fields: [gameProgressId], references: [id], onDelete: Cascade)

  gameId      String
  score       Int
  xpEarned    Int
  coinsEarned Int
  resultData  Json // Detailed game-specific results
  playedAt    DateTime @default(now())

  @@index([userId])
  @@index([gameId])
  @@index([playedAt(sort: Desc)])
  @@map("game_result")
}

// ============================================
// LEARNING SYSTEM
// ============================================

model LearningModule {
  id               String   @id @default(uuid())
  moduleId         String   @unique // "money_basics", "banking", etc.
  title            String
  description      String
  totalXp          Int
  iconPath         String?
  gradientColors   Json // Array of hex colors ["#4A90E2", "#50E3C2"]
  order            Int      @default(0)
  orderIndex       Int      @default(0) // Alternative field name for order
  category         String   @default("general") // Module category (e.g., "investing", "budgeting")
  difficulty       String   @default("beginner") // Difficulty level: "beginner", "intermediate", "advanced"
  estimatedMinutes Int      @default(30) // Estimated time to complete module
  thumbnailUrl     String? // Thumbnail image URL
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  lessons Lesson[]

  @@index([order])
  @@index([orderIndex])
  @@map("learning_module")
}

model Lesson {
  id       String         @id @default(uuid())
  lessonId String         @unique // "mb_01", "mb_02", etc.
  moduleId String
  module   LearningModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  title            String
  description      String
  xpReward         Int
  estimatedMinutes Int
  content          Json // Array of lesson content objects
  order            Int    @default(0)
  orderIndex       Int    @default(0) // Alternative field name for order

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  progress LessonProgress[]

  @@index([moduleId])
  @@index([order])
  @@index([orderIndex])
  @@map("lesson")
}

model LessonProgress {
  id       String @id @default(uuid())
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  isCompleted  Boolean   @default(false)
  completedAt  DateTime?
  lastAccessed DateTime? // Track when lesson was last accessed
  xpEarned     Int       @default(0)

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
  @@map("lesson_progress")
}

// ============================================
// QUIZ SYSTEM
// ============================================

model QuizQuestion {
  id                 String @id @default(uuid())
  questionId         String @unique
  question           String
  options            Json // Array of strings
  correctAnswerIndex Int
  difficulty         String // "easy", "medium", "hard"
  category           String // "budgeting", "saving", "investing", etc.
  explanation        String
  points             Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([difficulty])
  @@index([category])
  @@map("quiz_question")
}

// ============================================
// ACHIEVEMENT SYSTEM
// ============================================

model Achievement {
  id            String @id @default(uuid())
  achievementId String @unique // "first_lesson", "week_streak", etc.
  title         String
  description   String
  icon          String // Icon identifier
  color         String // Hex color
  category      String // "learning", "gaming", "streak", "social", "level", "xp"
  requirement   Json? // Conditions to unlock { type, value, comparison } (optional, legacy)
  requiredValue Int    @default(0) // Numeric value required to unlock
  xpReward      Int    @default(0) // XP awarded when unlocked

  createdAt DateTime @default(now())

  // Relations
  userAchievements UserAchievement[]

  @@index([category])
  @@map("achievement")
}

model UserAchievement {
  id            String      @id @default(uuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  unlockedAt DateTime @default(now())

  @@unique([userId, achievementId])
  @@index([userId])
  @@index([unlockedAt(sort: Desc)])
  @@map("user_achievement")
}

// ============================================
// STREAK SYSTEM
// ============================================

model StreakHistory {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  streakDays Int // Number of consecutive days in this streak
  startDate  DateTime // When this streak started
  endDate    DateTime // When this streak ended (broken)

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([endDate(sort: Desc)])
  @@map("streak_history")
}
